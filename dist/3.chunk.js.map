{"version":3,"sources":["E:/WORK_WORK/Glthamturakit/glthamturakit/src/app/layout/company/company-routing.module.ts","E:/WORK_WORK/Glthamturakit/glthamturakit/src/app/layout/company/company.component.html","E:/WORK_WORK/Glthamturakit/glthamturakit/src/app/layout/company/company.component.scss","E:/WORK_WORK/Glthamturakit/glthamturakit/src/app/layout/company/company.component.ts","E:/WORK_WORK/Glthamturakit/glthamturakit/src/app/layout/company/company.module.ts","E:/WORK_WORK/Glthamturakit/glthamturakit/src/app/layout/company/company.service.ts","E:/WORK_WORK/Glthamturakit/glthamturakit/src/assets/models/company.model.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAyC;AACc;AAEA;AAEvD,IAAM,MAAM,GAAW;IACnB,EAAE,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,4EAAgB,EAAE;CAC5C,CAAC;AAMF,IAAa,oBAAoB;IAAjC;IAAoC,CAAC;IAAD,2BAAC;AAAD,CAAC;AAAxB,oBAAoB;IAJhC,8EAAQ,CAAC;QACN,OAAO,EAAE,CAAC,qEAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QACxC,OAAO,EAAE,CAAC,qEAAY,CAAC;KAC1B,CAAC;GACW,oBAAoB,CAAI;AAAJ;;;;;;;;ACbjC,2MAA2M,4BAA4B,mHAAmH,uBAAuB,oQAAoQ,uBAAuB,oLAAoL,iBAAiB,gHAAgH,uBAAuB,uLAAuL,iBAAiB,gHAAgH,2BAA2B,2LAA2L,iBAAiB,gHAAgH,wBAAwB,wLAAwL,iBAAiB,gHAAgH,wBAAwB,wLAAwL,iBAAiB,gHAAgH,0BAA0B,wLAAwL,iBAAiB,gHAAgH,qBAAqB,qLAAqL,iBAAiB,uHAAuH,4BAA4B,iIAAiI,iBAAiB,sNAAsN,oBAAoB,GAAG,sBAAsB,wQAAwQ,oBAAoB,sJ;;;;;;;ACA3nH;AACA;;;AAGA;AACA;;AAEA;;;AAGA;AACA,2C;;;;;;;;;;;;;;;;;;;;;ACXmD;AACD;AACS;AAO3D,IAAa,gBAAgB;IAI3B,0BAAmB,cAA8B;QAA9B,mBAAc,GAAd,cAAc,CAAgB;QAFjD,gBAAW,GAAiB,IAAI,iFAAY,EAAE,CAAC;IAI/C,CAAC;IAED,mCAAQ,GAAR;QACE,IAAI,CAAC,UAAU,EAAE,CAAC;IACpB,CAAC;IAED,qCAAU,GAAV;QAAA,iBAOC;QANC,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE,CAAC,IAAI,CAAC,UAAC,GAAG;YACxC,KAAI,CAAC,WAAW,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;YAC1C,OAAO,CAAC,GAAG,CAAC,KAAI,CAAC,WAAW,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,GAAG;YACX,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACnB,CAAC,CAAC;IACJ,CAAC;IAED,sCAAW,GAAX,UAAY,WAAW;QAAvB,iBAcC;QAbC,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QACzB,EAAE,CAAC,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC;YACpB,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,UAAC,GAAG;gBACtD,KAAI,CAAC,WAAW,GAAG,GAAG,CAAC;gBACvB,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACnB,CAAC,CAAC;QACJ,CAAC;QAAA,IAAI,EAAC;YACJ,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,UAAC,GAAG;gBACpD,KAAI,CAAC,WAAW,GAAG,GAAG,CAAC;gBACvB,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACnB,CAAC,CAAC;QACJ,CAAC;IAEH,CAAC;IAEH,uBAAC;AAAD,CAAC;AArCY,gBAAgB;IAL5B,+EAAS,CAAC;QACT,QAAQ,EAAE,aAAa;QACvB,6FAAuC;QACvC,6FAAuC;KACxC,CAAC;yDAKmC,wEAAc,oBAAd,wEAAc;GAJtC,gBAAgB,CAqC5B;AArC4B;;;;;;;;;;;;;;;;;;;;;;;;;ACTyB;AACb;AACM;AACF;AAEmB;AACT;AACa;AAcpE,IAAa,sBAAsB;IAAnC;IAAsC,CAAC;IAAD,6BAAC;AAAD,CAAC;AAA1B,sBAAsB;IAZlC,8EAAQ,CAAC;QACR,OAAO,EAAE;YACP,qEAAY;YACZ,qFAAoB;YACpB,2DAAW;YACX,4EAAe;SAChB;QACD,YAAY,EAAE,CAAC,4EAAgB,CAAC;QAChC,SAAS,EAAC;YACR,0FAAc;SACf;KACF,CAAC;GACW,sBAAsB,CAAI;AAAJ;;;;;;;;;;;;;;;;;;;;;;;;;;ACrBQ;AACN;AACN;AACM;AACW;AAIhD,IAAa,cAAc;IAEzB,wBAAoB,IAAU;QAAV,SAAI,GAAJ,IAAI,CAAM;IAAI,CAAC;IAEnC,mCAAU,GAAV;QACE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,iEAAS,CAAC,GAAG,GAAG,eAAe,CAAC,CAAC,SAAS,EAAE;aAC9D,IAAI,CAAC,kBAAQ,IAAI,eAAQ,CAAC,IAAI,EAAkB,EAA/B,CAA+B,CAAC;aACjD,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC7B,CAAC;IACD,oCAAW,GAAX,UAAY,OAAO;QACjB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,iEAAS,CAAC,GAAG,GAAG,eAAe,EAAE,OAAO,CAAC,CAAC,SAAS,EAAE;aACxE,IAAI,CAAC,kBAAQ,IAAI,eAAQ,CAAC,IAAI,EAAkB,EAA/B,CAA+B,CAAC;aACjD,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC7B,CAAC;IAED,sCAAa,GAAb,UAAc,OAAO;QACnB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,iEAAS,CAAC,GAAG,GAAG,gBAAgB,GAAG,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC,SAAS,EAAE;aACtF,IAAI,CAAC,kBAAQ,IAAI,eAAQ,CAAC,IAAI,EAAkB,EAA/B,CAA+B,CAAC;aACjD,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC7B,CAAC;IAGO,oCAAW,GAAnB,UAAoB,KAAU;QAC5B,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,CAAC;IAChD,CAAC;IAEH,qBAAC;AAAD,CAAC;AA1BY,cAAc;IAD1B,gFAAU,EAAE;yDAGe,2DAAI,oBAAJ,2DAAI;GAFnB,cAAc,CA0B1B;AA1B0B;;;;;;;;;;ACR3B;AAAA;IAAA;IASA,CAAC;IAAD,mBAAC;AAAD,CAAC","file":"3.chunk.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { CompanyComponent } from \"./company.component\";\r\n\r\nconst routes: Routes = [\r\n    { path: '', component: CompanyComponent }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class CompanyRoutingModule { }\r\n\n\n\n// WEBPACK FOOTER //\n// E:/WORK_WORK/Glthamturakit/glthamturakit/src/app/layout/company/company-routing.module.ts","module.exports = \"<div>\\n    <ol class=\\\"breadcrumb\\\">\\n        <!-- <li class=\\\"breadcrumb-item\\\">\\n            <i class=\\\"fa fa-list-ul\\\"></i>\\n            <a [routerLink]=\\\"['/account-type-list']\\\">{{'account-type' | translate}}</a>\\n        </li> -->\\n        <li class=\\\"breadcrumb-item active\\\">\\n            <i class=\\\"fa fa-edit\\\"></i> {{'company' | translate}}</li>\\n    </ol>\\n\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-md-3 col-sm-1\\\">\\n        </div>\\n        <div class=\\\"col-md-6 col-sm-10\\\">\\n            <form role=\\\"form\\\">\\n                <fieldset class=\\\"form-group\\\">\\n                    <label>{{'company' | translate}}</label>\\n                    <span class=\\\"danger\\\">*</span>\\n                    <input class=\\\"form-control\\\" type=\\\"text\\\" [(ngModel)]=\\\"companyData.name\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\\n                </fieldset>\\n                <fieldset class=\\\"form-group\\\">\\n                    <label>{{'address' | translate}}</label>\\n                    <span class=\\\"danger\\\">*</span>\\n                    <input class=\\\"form-control\\\" type=\\\"text\\\" [(ngModel)]=\\\"companyData.address\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\\n                </fieldset>\\n                <fieldset class=\\\"form-group\\\">\\n                    <label>{{'subDistrict' | translate}}</label>\\n                    <span class=\\\"danger\\\">*</span>\\n                    <input class=\\\"form-control\\\" type=\\\"text\\\" [(ngModel)]=\\\"companyData.subDistrict\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\\n                </fieldset>\\n                <fieldset class=\\\"form-group\\\">\\n                    <label>{{'district' | translate}}</label>\\n                    <span class=\\\"danger\\\">*</span>\\n                    <input class=\\\"form-control\\\" type=\\\"text\\\" [(ngModel)]=\\\"companyData.district\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\\n                </fieldset>\\n                <fieldset class=\\\"form-group\\\">\\n                    <label>{{'province' | translate}}</label>\\n                    <span class=\\\"danger\\\">*</span>\\n                    <input class=\\\"form-control\\\" type=\\\"text\\\" [(ngModel)]=\\\"companyData.province\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\\n                </fieldset>\\n                <fieldset class=\\\"form-group\\\">\\n                    <label>{{'postalCode' | translate}}</label>\\n                    <span class=\\\"danger\\\">*</span>\\n                    <input class=\\\"form-control\\\" type=\\\"text\\\" [(ngModel)]=\\\"companyData.postCode\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\\n                </fieldset>\\n                <fieldset class=\\\"form-group\\\">\\n                    <label>{{'phone' | translate}}</label>\\n                    <span class=\\\"danger\\\">*</span>\\n                    <input class=\\\"form-control\\\" type=\\\"text\\\" [(ngModel)]=\\\"companyData.phone\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\\n                </fieldset>\\n\\n                <!-- <fieldset class=\\\"form-group\\\">\\n                    <label>{{'account-type' | translate}}</label>\\n                    <select [(ngModel)]=\\\"accounttypeId\\\" (change)=\\\"onChangeType(accounttypeId)\\\" [ngModelOptions]=\\\"{standalone: true}\\\" class=\\\"form-control\\\">\\n                        <option *ngFor=\\\"let type of accountTypeList\\\" [value]=\\\"type._id\\\" [attr.selected]=\\\"accounttypeId === type._id  ? true : null\\\">\\n                            {{type.accounttypeno}} {{type.accounttypename}}\\n                        </option>\\n                    </select>\\n                </fieldset> -->\\n\\n                <div class=\\\"col-12 text-center\\\">\\n                    <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" (click)=\\\"saveCompany(companyData)\\\">{{'save' | translate}}</button>\\n                </div>\\n            </form>\\n        </div>\\n        <div class=\\\"col-md-3 col-sm-1\\\">\\n        </div>\\n    </div>\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// E:/WORK_WORK/Glthamturakit/glthamturakit/src/app/layout/company/company.component.html\n// module id = ../../../../../src/app/layout/company/company.component.html\n// module chunks = 3","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// E:/WORK_WORK/Glthamturakit/glthamturakit/src/app/layout/company/company.component.scss\n// module id = ../../../../../src/app/layout/company/company.component.scss\n// module chunks = 3","import { CompanyService } from './company.service';\nimport { Component, OnInit } from '@angular/core';\nimport { CompanyModel } from 'assets/models/company.model';\n\n@Component({\n  selector: 'app-company',\n  templateUrl: './company.component.html',\n  styleUrls: ['./company.component.scss']\n})\nexport class CompanyComponent implements OnInit {\n\n  companyData: CompanyModel = new CompanyModel();\n\n  constructor(public companyService: CompanyService) {\n\n  }\n\n  ngOnInit() {\n    this.getCompany();\n  }\n\n  getCompany() {\n    this.companyService.getCompany().then((res) => {\n      this.companyData = (res[0]) ? res[0] : {};\n      console.log(this.companyData);\n    }).catch((err) => {\n      console.log(err);\n    })\n  }\n\n  saveCompany(companyData) {\n    console.log(companyData);\n    if (companyData._id) {\n      this.companyService.upDateCompany(companyData).then((res) => {\n        this.companyData = res;\n        console.log(res);\n      })\n    }else{\n      this.companyService.postCompany(companyData).then((res)=>{\n        this.companyData = res;\n        console.log(res);\n      })\n    }\n\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// E:/WORK_WORK/Glthamturakit/glthamturakit/src/app/layout/company/company.component.ts","import { TranslateModule } from '@ngx-translate/core';\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { CompanyRoutingModule } from \"./company-routing.module\";\r\nimport { CompanyComponent } from \"./company.component\";\r\nimport { CompanyService } from 'app/layout/company/company.service';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    CompanyRoutingModule,\r\n    FormsModule,\r\n    TranslateModule\r\n  ],\r\n  declarations: [CompanyComponent],\r\n  providers:[\r\n    CompanyService\r\n  ]\r\n})\r\nexport class CompanyComponentModule { }\r\n\n\n\n// WEBPACK FOOTER //\n// E:/WORK_WORK/Glthamturakit/glthamturakit/src/app/layout/company/company.module.ts","import { Injectable } from '@angular/core';\nimport { Http } from '@angular/http';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/toPromise';\nimport { Constants } from \"../../app.constants\";\nimport { CompanyModel } from 'assets/models/company.model';\n\n@Injectable()\nexport class CompanyService {\n\n  constructor(private http: Http) { }\n\n  getCompany() {\n    return this.http.get(Constants.URL + 'api/companies').toPromise()\n      .then(response => response.json() as CompanyModel)\n      .catch(this.handleError);\n  }\n  postCompany(company) {\n    return this.http.post(Constants.URL + 'api/companies', company).toPromise()\n      .then(response => response.json() as CompanyModel)\n      .catch(this.handleError);\n  }\n\n  upDateCompany(company) {\n    return this.http.put(Constants.URL + 'api/companies/' + company._id, company).toPromise()\n      .then(response => response.json() as CompanyModel)\n      .catch(this.handleError);\n  }\n\n\n  private handleError(error: any): Promise<any> {\n    return Promise.reject(error.message || error);\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// E:/WORK_WORK/Glthamturakit/glthamturakit/src/app/layout/company/company.service.ts","export class CompanyModel {\r\n    _id: string;\r\n    name: string;\r\n    address: string;\r\n    subDistrict: string;\r\n    district: string;\r\n    province: string;\r\n    postCode: string;\r\n    phone: string;\r\n}\n\n\n// WEBPACK FOOTER //\n// E:/WORK_WORK/Glthamturakit/glthamturakit/src/assets/models/company.model.ts"],"sourceRoot":"webpack:///"}